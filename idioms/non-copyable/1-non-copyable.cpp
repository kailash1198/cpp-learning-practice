#include <iostream>
// non copyable idioms apply on class for prevent copies of object or assigned of object

class nonCopyable
{
public:
    // default constructor and destructor which means generated by compiler
    nonCopyable() = default;
    ~nonCopyable() = default;

    // delete the copy constructor(Explicit delete)
    nonCopyable(const nonCopyable &) = delete;

    // delete the copy assignment operator(Explicit delete)
    nonCopyable &operator=(const nonCopyable &) = delete;
};

int main()
{
    nonCopyable objOne;

    // nonCopyable objTwo = objOne;//error because you cannot copy of object.
    // objOne = objTwo //error because you cannot assign object.
    return 0;
}